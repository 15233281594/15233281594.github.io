[{"title":"Electron","url":"/posts/3045.html","content":"\n# electron-跨平台桌面应用\n\n<!-- more -->\n\n### 1.认识 electron\n\n#### 1.什么是 Electron？\n\n```html\nElectron 是一个使用 JavaScript、HTML 和 CSS 构建桌面应用的框架。\n```\n\n#### 2.搭建项目\n\n- npm\n\n```shell\n$ npm create @quick-start/electron\n```\n\n- yarn\n\n```shell\n$ yarn create @quick-start/electron\n```\n\n- pnpm\n\n```shell\n$ pnpm create @quick-start/electron\n```\n\n​ 1.输入 electron，项目名称，按下回车第一步成功\n\n![img](https://z1.ax1x.com/2023/10/12/piSBG0s.png)\n\n​ 2.选择 react，按下回车第二步成功\n\n![img](https://z1.ax1x.com/2023/10/12/piSBJ7n.png)\n\n3.按一下 tab 键位，选择使用 ts，按下回车第三步成功\n\n![img](https://z1.ax1x.com/2023/10/12/piSBNt0.png)\n\n4.按一下 tab 键位，选择使用 plugin，按下回车第四步成功\n\n![img](https://z1.ax1x.com/2023/10/12/piSBdpT.png)\n\n5.按一下 tab 键位，选择开启 proxy，按下回车最后一步成功\n\n![img](https://z1.ax1x.com/2023/10/12/piSB0cF.png)\n"},{"title":"Husky","url":"/posts/3045.html","content":"\n# Husky\n\n<!-- more -->\n\n#### 1.认识 Husky\n\n### 1.前提\n\n```yaml\n1.使用husky电脑必须安装git.\n2.在项目中使用husky必须要有git仓库,就是.git文件。如果没有,git init即可。\n```\n\n### 2. 集成 editorconfig 配置\n\nEditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。\n\n```yaml\n# http://editorconfig.org\n\nroot = true\n\n[*] # 表示所有文件适用\ncharset = utf-8 # 设置文件字符集为 utf-8\nindent_style = space # 缩进风格（tab | space）\nindent_size = 2 # 缩进大小\nend_of_line = lf # 控制换行类型(lf | cr | crlf)\ntrim_trailing_whitespace = true # 去除行尾的任意空白字符\ninsert_final_newline = true # 始终在文件末尾插入一个新行\n\n[*.md] # 表示仅 md 文件适用以下规则\nmax_line_length = off\ntrim_trailing_whitespace = false\n```\n\n- VSCode 需要安装一个插件：EditorConfig for VS Code\n\n![image-20210722215138665](https://z1.ax1x.com/2023/09/15/pPWtXSP.png)\n\n### 3. 使用 prettier 工具\n\nPrettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。\n\n1.安装 prettier\n\n```shell\nnpm install prettier -D\n```\n\n2.配置.prettierrc 文件：\n\n- useTabs：使用 tab 缩进还是空格缩进，选择 false；\n- tabWidth：tab 是空格的情况下，是几个空格，选择 2 个；\n- printWidth：当行字符的长度，推荐 80，也有人喜欢 100 或者 120；\n- singleQuote：使用单引号还是双引号，选择 true，使用单引号；\n- trailingComma：在多行输入的尾逗号是否添加，设置为 `none`，比如对象类型的最后一个属性后面是否加一个，；\n- semi：语句末尾是否要加分号，默认值 true，选择 false 表示不加；\n\n```json\n{\n  \"useTabs\": false,\n  \"tabWidth\": 2,\n  \"printWidth\": 80,\n  \"singleQuote\": true,\n  \"trailingComma\": \"none\",\n  \"semi\": false\n}\n```\n\n3.创建.prettierignore 忽略文件\n\n```\n/dist/*\n.local\n.output.js\n/node_modules/**\n\n**/*.svg\n**/*.sh\n\n/public/*\n```\n\n4.VSCode 需要安装 prettier 的插件\n\n5.测试 prettier 是否生效\n\n- 测试一：在代码中保存代码；\n- 测试二：配置一次性修改的命令；\n\n在 package.json 中配置一个 scripts：\n\n```json\n\"prettier\": \"prettier --write .\"\n```\n\n### 4. 使用 ESLint 检测\n\n1.在前面创建项目的时候，我们就选择了 ESLint，所以 Vue 会默认帮助我们配置需要的 ESLint 环境。\n\n2.VSCode 需要安装 ESLint 插件\n\n3.解决 eslint 和 prettier 冲突的问题：\n\n安装插件：（vue 在创建项目时，如果选择 prettier，那么这两个插件会自动安装）\n\n```shell\nnpm install eslint-plugin-prettier eslint-config-prettier -D\n```\n\n添加 prettier 插件：\n\n```json\n  extends: [\n    \"plugin:vue/vue3-essential\",\n    \"eslint:recommended\",\n    \"@vue/typescript/recommended\",\n    \"@vue/prettier\",\n    \"@vue/prettier/@typescript-eslint\",\n    'plugin:prettier/recommended'\n  ],\n```\n\n4.VSCode 中 eslint 的配置\n\n```json\n  \"eslint.lintTask.enable\": true,\n  \"eslint.alwaysShowStatus\": true,\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    \"typescript\",\n    \"typescriptreact\"\n  ],\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n```\n\n### 5.git Husky 和 eslint\n\n​ 1.虽然我们已经要求项目使用 eslint 了，但是不能保证组员提交代码之前都将 eslint 中的问题解决掉了，也就是我们希望保证代码仓库中的代码都是符合 eslint 规范的；\n\n​ 2.那么我们需要在组员执行 `git commit ` 命令的时候对其进行校验，如果不符合 eslint 规范，那么自动通过规范进行修复；\n\n那么如何做到这一点呢？可以通过 Husky 工具\n\n​ 3.husky 是一个 git hook 工具，可以帮助我们触发 git 提交的各个阶段：pre-commit、commit-msg、pre-push\n\n```shell\n安装: npx husky-init && npm install   有些电脑需要这样写 npx husky-init '&&' npm install\n```\n\n```shell\n1.安装husky相关的依赖:\n```\n\n![image-20210723112648927](https://z1.ax1x.com/2023/09/15/pPWD7GQ.png)\n\n```shell\n2.自动在项目目录下创建 `.husky` 文件夹:\n```\n\n![image-20210723112719634](https://z1.ax1x.com/2023/09/15/pPWrCRJ.png)\n\n```shell\n3.自动在package.json中添加一个脚本:\n```\n\n![image-20210723112817691](https://z1.ax1x.com/2023/09/15/pPWrFMR.png)\n\n```shell\n4.接下来，我们需要去完成一个操作：在进行git commit  -m ' ' 时，执行lint脚本:\n```\n\n![image-20210723112932943](https://z1.ax1x.com/2023/09/15/pPWrUJg.png)\n\n```shell\n5.出现这行即表示成功。在执行commit时，会自动执行npm run lint这行校验代码。帮助你去修复不规范的代码。\n```\n\n​ ![image-20210723112932943](https://z1.ax1x.com/2023/09/15/pPWsJXR.png)\n"},{"title":"Jquery","url":"/posts/14384.html","content":"\n# jQuery\n\n<!-- more -->\n\n#### 1.认识 jquery\n\n```javascript\njquery是一个快速，小型且功能丰富的javascript库。该库包含了dom操作，选择器，事件处理，动画和ajax等核心功能。\n现在我们可以简单的理解它就是一个js文件，执行该文件会给window对象添加一个jquery函数。(window.jquery) === $\n接着我们就可以调用jquery函数(工厂函数),或者使用该函数上的类方法。\n\n优点:跨浏览器支持:提供出色的跨浏览器支持(iE9+),无需编写额外代码\n\n缺点：jquery代码库一直在增长（自jquery1.5起超过200kb）\n不支持组件化开发\njquery更适合DOM操作，当涉及到开发复杂项目时，jquery能力有限。\n```\n\n#### 2.认识 CDN\n\nCDN 称之为成为内容分发网络。CDN 是网络系统给我们的资源增加访问速度，为源站减压。\n\n更简单的理解 CDN：\n\n​ CDN 会将资源缓存到遍布全球的网站，用户请求获取资源时，可就近获取 CDN 上的资源，提高资源访问速度，同时分担源站压力\n\n```javascript\n使用Jquery 方式一 cdn方式引入\n\n\nintegrity：hash资源,防止资源被篡改,如果浏览器发现资源被篡改,就不会加载该资源\ncrossorigin：加载不同源的资源时,浏览器是否需要携带用户凭证信息(eg:cookie,ssl证书)\n   anonymous：不需要携带\n   user-credentail 需要携带\n\n<script src=\"https://code.jquery.com/jquery-3.7.0.js\" integrity=\"sha256JlqSTELeR4TLqP0OG9dxM7yDPqX1ox/HfgiSLBj8+kM=\" crossorigin=\"anonymous\"></script>\n\n\n正常使用： <script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\n```\n"},{"title":"Sequelize","url":"/posts/35110.html","content":"\n# 你真正了解 sequelize 吗\n\n<!-- more -->\n\n### 主键\n\n```\n{ primaryKey: true }\n```\n\n### 唯一键\n\n```\n{ unique: true }\n{ unique: 'compositeIndex' }\n```\n\n### 自增\n\n```\n{ autoIncrement: true }\n```\n\n### 允许为空\n\n```\n{ allowNull: true }\n```\n\n### 默认值\n\n```\n{ defaultValue: true }\n{ defaultValue: DataTypes.NOW }\n```\n\n### 属性/外键\n\n```\npersonId: {\n  type: Sequelize.INTEGER,\n  references: 'persons',\n  referencesKey: 'id'\n}\n```\n\n##### 安装\n\n```\nnpm install --save sequelize\n$ npm install --save mysql2\n```\n\n###### 测试连接\n\n```\nsequelize\n    .authenticate()\n    .then(() => {\n        console.log('Connection has been established successfully.');\n    })\n    .catch(err => {\n        console.error('Unable to connect to the database:', err);\n    });\n// 测试完注释掉即可\n```\n\n###### 使用 sequelize\n\n```\nconst sequelize = new Sequelize('db','root','123456',{\n  dialect:'mysql',\n  host:'127.0.0.1',\n  timezone:'+08:00', //这里是东八区,默认为0时区\n  //连接池 最大5个 最小0个 时间10000毫秒\n  pool:{\n    max:5,\n    min:0,\n    acquire:30000,\n    idle:10000,\n  }\n})\n```\n\n###### 创建数据库表(创建模型 就是字段)\n\n```\nconst book = sequelize.define('book',{\n   name:{\n    type:DataTypes.STRING,\n    allowNull:false,\n   },\n   price:{\n    type:DataTypes.INTEGER,\n   },\n   author:DataTypes.STRING,\n   type:DataTypes.STRING,\n},{\n  //关闭默认创建字段的开始时间和结束时间\n  timestamps:false,\n})\n// 更多的查看官网\nhttps://www.sequelize.cn/core-concepts/model-basics\n```\n\n###### 插入数据\n\n```\nasync function inits(){\n//将创建表,如果表已经存在,则将其首先删除(用户模型表刚刚(重新)创建)  sequelize实例同步所有模型字段\n  await sequelize.sync({\n    force:true\n  })\n  //插入多条数据  单条数据create({name:'张三',price:20})\n  await book.bulkCreate(\n   [\n    {\n      name: 'Rick And Morty - The first season',\n      price: 30,\n      author: 'unkwon',\n      type: 'comic'\n    },\n    {\n      name: 'Rick And Morty',\n      price: 300,\n      author: 'unkwon',\n      type: 'comic'\n    },\n    {\n      name: 'Rick And',\n      price: 3000,\n      author: 'unkwon',\n      type: 'comic'\n    },\n   ]\n  )\n}\n\ninits();\n```\n\n```express\n// 每次连接都将把原来的表删除,然后做一次同步\nsequelize.sync({\n   force:true,\n }).then(()=> user.create({\n     firstName:'四哥',\n     lastName:'aosika'\n }).then(()=>{\n   return user.findAll({\n     where:{\n       firstName:'四哥'\n      }\n    })\n  }).then(console.log)\n)\n```\n\n### express res.send()和 res.json()的区别\n\n```\nres.json()的返回结果\nResponse Headers 响应头中\n  content-Type:application/json;charset=utf-8;\n\nres.send()\nResponse Headers\n  content-Type:text/html;charset=utf-8;\n```\n\n###### 为什么使用数据库连接池\n\n```\n数据库连接是一种关键、有限且昂贵的资源，创建和释放数据库连接是一个很耗时的操作，频繁地进行这样的操作将占用大量的性能开销，进而导致网站的响应速度下降，严重的时候可能导致服务器崩溃；数据库连接池可以节省系统许多开销。\n\n它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个；释放空闲时间超过最大空闲时间的数据库连接以避免因为没有释放数据库连接而引起的数据库连接遗漏。\nhttps://blog.csdn.net/weixin_42867975/article/details/90306610\n\nhttps://www.cnblogs.com/xsilence/p/12444228.html#:~:text=%E8%AF%AD%E6%B3%95%20%EF%BC%881%EF%BC%89createConnection%E6%96%B9%E6%B3%95%E5%88%9B%E5%BB%BA%E8%BF%9E%E6%8E%A5%E5%AF%B9%E8%B1%A1%EF%BC%88%E6%AD%A3%E5%BC%8F%E7%9A%84%E8%AF%B4%E6%B3%95%EF%BC%9A%E4%BD%BF%E7%94%A8createConnection%E6%96%B9%E6%B3%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A1%A8%E7%A4%BA%E4%B8%8Emysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E8%BF%9E%E6%8E%A5%E7%9A%84connection%E5%AF%B9%E8%B1%A1%EF%BC%89%20var%20connection%20%3D%20mysql.%20createConnection%20%28options%29%3B,%EF%BC%882%EF%BC%89%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%9A%84connect%E6%96%B9%E6%B3%95%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E3%80%82%20connection.%20connect%20%28function%20%28err%29%20%7B%20%2A%2A%2A%20%7D%29%3B\n```\n\n###### 在设计数据库时为什么有的时候需要使用外键\n\n```\n什么是外键：\n外键 (FK) 是用于建立和加强两个表数据之间的链接的一列或多列。通过将保存表中主键值的一列或多列添加到另一个表中，可创建两个表之间的链接。这个列就成为第二个表的外键。\n   外键可以保证数据的参照完整性。\n如果一个健壮的系统，数据库中的数据一定有很好的参照完整性，如果不用外键，就要多写代码对数据的完整性进行额外的判断\n\t用程序(代码)控制，有很多缺点；录入成绩单时为了保证学号有效，首先要搜索档案，当档案很大时会影响效率。程序控制并不能保证百分之百引用完整性，尤其是并发操作。\n\t说一个特例（主要是说明程序控制不好）：\nA录入成绩单，B在编辑档案。\n当A录入张三的成绩，保存时，搜索张三存在，于是程序下一步就要存盘，但这时B恰好把张三删除了。但A那边的程序并不知道，于是就把一条垃圾数据存进数据库中了。\n此例的操作流程正确与否不重要，但说明了程序控制并不是好方法。\n```\n\n###### express 中的 req.params,req.query,req.body;\n\n```\nreq.params 是获取路由的url路径参数\nhttp:localhost:3000/test/1\nreq.query 是获取路由的查询参数\nhttp:localhost:3000/test?id=1;\n以上两种一般用于get请求;(params和query与前端作用相同)\nreq.body 一般用于post请求\nreq.body是用来解析post请求中的数据,前端数据发送给后端的时候,用req.body用来接收。\n```\n\n```express\nrouter.post('/login',function(req,res){\n    let username=req.body.username;\n    let password=req.body.password;\n    if(username && password){\n        res.send({\n            code:200,\n            username:username,          token:'dhuadh123hui213h,dqwdfiuejnfuiwjf,fewkio0kjfi9203kjirjf'\n        })\n    }else{\n        code:500,\n        res.send({\n            msg:'用户名密码错误'\n        })\n    }\n})\n```\n\n###### 为什么分类页面接口写 2 个响应速度最快\n\n```\n因为分类页面分为左右两部分，分为2个接口一方面是数据少响应快，第二是因为如果加了redis就更快了\n```\n\n###### 为什么首页使用 redis 后每次请求数据的时间还变慢了\n\n```\n因为使用redis后第一次请求的时候是从数据库开始请求数据的，数据很多，响应的快，第二次请求的时候redis已经将数据保存在缓存中了，将大量数据都保存在缓存中，就好比一个池子一样，找到对应的一条数据响应时间边长，但是这样的好处不仅减少了数据库的压力，更大的减少了资源的浪费\n```\n\n###### token\n\n```\ntokend是一个令牌，用来验证哪一个用户的\n作用：验证用户 比如张三 李四\ntoken是后端生成的,并且token是不能重复的\nnpm install --save jsonwebtoken\n```\n"},{"title":"Mysql","url":"/posts/62688.html","content":"\n# Mysql\n\n<!-- more -->\n\n```mysql\n关系型数据库和非关系型数据库\n  关系型数据库指的是使用关系模型（二维表格模型）来组织数据的数据库。\n  非关系型数据库又被称为 NoSQL（Not Only SQL )，意为不仅仅是 SQL。通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定，常用于存储非结构化的数据。\n```\n\n```\nMysql -u root -p\n123456\n```\n\n```\nshow databases;\n```\n\n```\nuse db;\nselect database(); 查看使用的哪个数据库\n```\n\n```\n创建数据库\ncreate database if not exists douyu;\ncreate database if not exists huya default character set utf8mb4;\n```\n\n```\ndrop database if exists huya;\n```\n\n```\n查看所有的表 show tables;\n查看表的结构 desc students;\n创建表\ncreate table if not exists `students`(\n\t`name` varchar(10),\n\t`age` int,\n\t`score` int\n);\n删除表 drop table if exists `students`;\n```\n\n```\n完整表  查看字段 右击->设计表\ncreate table if not exists `users`(\n\tid int primary key auto_increment,//主键 自动增长\n\tname varchar(20) not null,\n\tage int default 0,\n\tphoneNum varchar(20) unique not null,//unique唯一的\n\tcreatetime timestamp //时间戳\n)\n修改表的名字 alter table `users` rename to `user`;\n添加一个新的列 alter table `user` add `updatetime` timestamp\n修改字段的名字 alter table `user` change `phoneNum` `elephone` varchar(20)\n修改字段的类型 alter table `user` modify `name` varchar(30)\n删除某一个字段 alter table `user` drop age;\n```\n\n```\n插入数据 Affcted row:1 表示成功 且插入的数据不能重复，否则会报1062\ninsert into `user` values(0,'zzz','080-110110','2020-10-10','2020-12-10');\ninsert into `user` (name,elephone,createtime,updatetime)\n\tvalues ('acd','789-201030','1999-10-1','2000-1-9');\n删除符合条件的数据 delete from `user` where id = '116';\n更新符合条件的数据 update `user` set name='lougou',elephone='321-333333' where id = '117';\n```\n\n```\n数据的查询语句\n# 创建products的表\nCREATE TABLE IF NOT EXISTS `products` (\n\tid INT PRIMARY KEY AUTO_INCREMENT,\n\tbrand VARCHAR(20),\n\ttitle VARCHAR(100) NOT NULL,\n\tprice DOUBLE NOT NULL, //双精度浮点型    16位精度(8字节)\n\tscore DECIMAL(2,1), //精准数据类型\n\tvoteCnt INT,\n\turl VARCHAR(100),\n\tpid INT\n);\n//根据js代码把数据插入数据库\n\n```\n","categories":["Mysql"]}]